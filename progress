# first class ~ hash is for commenting
?Devices
starting httpd help server ... done
> pdf("C://Users//ADMIN//OneDrive//Desktop//Binder6.pdf",h=5, w=5)
C:\Users\ADMIN\OneDrive\Desktop

pdf("C://Users//ADMIN//OneDrive//Desktop//Saumu.pplotdf",h=6,w=6)
plot(hist(rnorm(100)))

ls() #displays all saved objects in the workspace
rm("y") #removing specific objects
ls()
rm(list=ls()) #removes all objects saved  on the workspace
ls()
?lm or help(lm) #gets more info on a function

library(datarium) #loads a package into the workspace
install.packages("ts") #installs packages

dev.off() #turns off any active devices

search() #shows loaded packages in R
detach("package:datarium") #detaches a loaded package in R
sqrt(-1)
z1=0+0i
z1
class(z1) #gives datatype of variable
sqrt(-1+0i)

fname='Clay'
lname='Jensen'
paste(fname,lname) #concat the two character variables

as.logical(variablename)  #converts the variable to another datatype

is.logical(variablename)   #confirms if the variable belongs to the stated datatype

substr("my name is Jane", start=1, stop=7) 

sub("Michael","Jane","Michael collected her parcels")
[1] "Jane collected her parcels"
 

#second class
VECTORS
x=c(2,5,7)
x[2]  #to extract the 2nd element

x[c(1,3)]  #to extract the 1st and 3rd element from the vector

#Ways to generate vectors
#1 - use full colon
1:10

#2 - seq()
seq(0,1,length=10)
seq(1,100,by=10)

#3 -concatenate c()
c(2,5,7,9)

#4 - rep()
rep(5,10)
rep(c(2,3),c(5,2))

#missing values
f=c('d',rep(NA,4),'a')
f
f[!is.na(f)] #returns the non-missing values in the vector

#replacing values
x[c(1,3)]=c(1,3)
x

#FACTORS
set.seed(100)
Values=rbinom(100,4,0.6)
Values
table(Values)
grades=factor(Values,levels=0:4,labels=c("A","B","C","D","E"))
grades
table(grades)

summary(grades)

factor(grades)

#MATRIX
A=c(1:6)
A
dim(A)=c(2,3)
A
b=c(10:15)
c
 C=matrix(b,nrow=2,ncol=3)
> 
> C
     [,1] [,2] [,3]
[1,]   10   12   14
[2,]   11   13   15
> E=matrix(b,nrow=4,ncol=6)
> E
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]   10   14   12   10   14   12
[2,]   11   15   13   11   15   13
[3,]   12   10   14   12   10   14
[4,]   13   11   15   13   11   15

#EXTRACTING elements
 C
     [,1] [,2] [,3]
[1,]   10   12   14
[2,]   11   13   15

> C[2,c(1,3)]
[1] 11 15

> C[1,c(1,3)]
[1] 10 14

#OPERATIONS ON MATRICES
C
   D  E  F
A 10 12 14
B 11 13 15
> D
     [,1] [,2] [,3]
[1,]    2    4    6
[2,]    3    5    7
> C+D #ADDITION
   D  E  F
A 12 16 20
B 14 18 22

 A%*%B #MULTIPLY 
     [,1] [,2]
[1,]   19   22
[2,]   43   50

 t(A)  #TRANSPOSE
     [,1] [,2]
[1,]    1    3
[2,]    2    4
> solve(A)  #INVERSE
     [,1] [,2]
[1,] -2.0  1.0
[2,]  1.5 -0.5

det(A)  #DETERMINANT
[1] -2
> nrow(A)  #N.O. OF ROWS IN A MATRIX
[1] 2
> ncol(A)  #N.O. OF COLUMNS IN A MATRIX
[1] 2

 A
     [,1] [,2]
[1,]    1    2
[2,]    3    4
> A%*%solve(A) #CREATING AN IDENTITY MATRIX
     [,1]         [,2]
[1,]    1 1.110223e-16
[2,]    0 1.000000e+00
> > diag(A)
[1] 1 4

> diag(A)
[1] 1 4
> V=diag(A)
> V
[1] 1 4
> diag(V)
     [,1] [,2]
[1,]    1    0
[2,]    0    4
> c

#assignment as at 24/01/23
#solve for x, y and z
 matrix1=matrix(c(2,2,6,1,6,8,3,8,18),nrow=3,ncol=3)
> matrix1
     [,1] [,2] [,3]
[1,]    2    1    3
[2,]    2    6    8
[3,]    6    8   18
> matrix1=solve(matrix1)
> solutions=matrix(c(1,3,5),nrow=3,ncol=1)
> matrix1%*%solutions
              [,1]
[1,]  3.000000e-01
[2,]  4.000000e-01
[3,] -2.220446e-16


#31/01/2023
K   #K^n = eigen vector %*% diag matrix of eigen values %*% inverse of eigen vector

[,1] [,2]
[1,]    2   -4
[2,]   -1   -1
> val=eigen(K)$values
> vec=eigen(K)$vectors
> val
[1]  3 -2
> vec
           [,1]      [,2]
[1,]  0.9701425 0.7071068
[2,] -0.2425356 0.7071068
> vec1=solve(vec)
> d=diag(val)
> n=10
> d^n
      [,1] [,2]
[1,] 59049    0
[2,]     0 1024
Kpow10=vec%*%d^n%*%vec1
Kpow10
       [,1]   [,2]
[1,]  47444 -46420
[2,] -11605  12629

 #ARRAYS
dim(A)=c(3,2,4)
 A
, , 1

     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6

, , 2

     [,1] [,2]
[1,]    7   10
[2,]    8   11
[3,]    9   12

, , 3

     [,1] [,2]
[1,]   13   16
[2,]   14   17
[3,]   15   18

, , 4

     [,1] [,2]
[1,]   19   22
[2,]   20   23
[3,]   21   24

A[2,,2] #extracting elements in R
[1]  8 11
A[1,,c(2,3,4)]
     [,1] [,2] [,3]
[1,]    7   13   19
[2,]   10   16   22


#lists in R
data=list(Courses=c("BAS","BFE","BST","BBS","BOR"),dept="STACS",numberofstudents=c(120,120,130,100,60),Year=c(1,2,3,4))
data

$Courses
[1] "BAS" "BFE" "BST" "BBS" "BOR"

$dept
[1] "STACS"

$numberofstudents
[1] 120 120 130 100  60

$Year
[1] 1 2 3 4

 #s/no=c(1,2,3)
#Error in s/no = c(1, 2, 3) : object 's' not found

s_no=c(1,2,3)
Name=c("John","Marcus","Philomena")
STA2100=c(57,65,48)
STA2102=c(62,53,75)
Total=c(119,118,123)
z=data.frame(s_no,Name, STA2100, STA2102, Total)
z
  s_no      Name STA2100 STA2102 Total
1    1      John      57      62   119
2    2    Marcus      65      53   118
3    3 Philomena      48      75   123

#EXTRACTING VALUES FROM A DATAFRAME
z[2,]
  s_no   Name STA2100 STA2102 Total
2    2 Marcus      65      53   118
> z[,3]
[1] 57 65 48
> z$STA2100
[1] 57 65 48
 z=data.frame(s_no,Name, STA2100, STA2102, STA2101=c(76,67,66), Total)
> z
  s_no      Name STA2100 STA2102 STA2101 Total
1    1      John      57      62      76   119
2    2    Marcus      65      53      67   118
3    3 Philomena      48      75      66   123
> z$STA2101
[1] 76 67 66
> attach(z)
The following objects are masked _by_ .GlobalEnv:

    Name, s_no, STA2100, STA2102, Total

> STA2101
[1] 76 67 66

#07/02/2023 : 3rd class
#user defined functions

Mean=function(x){ #user defined mean
sum(x)/length(x)
}
g=c(1,2,3,4)
Mean(g)

#example 2
fun=function(x,z){
z = x^2 + 3*x + 5
y = x^2 + log(z)
return(y)
}
fun(2,3)
fun(5,10)

#exercise 1
annuity=function(i,n){ #returns the ordinary annuity 
v=(1+i)^(-n) #where i is a percentage written in decimal form
num=1-v
a=num/i
return(a)
}
annuity(0.05,2)

#exercise 2
pay=function(A,p,n,i){
v=(i+i)^(-n)
ip=p((i+1)^(1/p)-1)
annuity=(1-v)/ip
x=A/(p*annuity)
return(x)
}

#example
sciences=function(b,c,p){
a.b=mean(b)
a.c=mean(c)
a.p=mean(p)
t=c(a.b,a.c,a.p)
return(t)
}

#or
 
sciences=function(b,c,p){
a.b=mean(b)
a.c=mean(c)
a.p=mean(p)
return(list=c(a.b,a.c,a.p))
}

###conditional  statements
## if statement
t=3
y=0
if(t!=0)
{
y=t*3
}
y #y=9

t=3
z=5
y=0
if(t==0 & z==5)
{
y=t*3+z^2
}
y #y=0


t=3
z=5
y=0
if(t==0 | z==5)
{
y=t*3+z^2
}
y  #y=34

##IF ELSE STATEMENT
#example 1 
t=3
z=5
y=0
if(t==0 & z==5)
{
y=t*3+z^2
}else{
y=7
} #y=7

#example 2
t=3
z=5
if(t<=5 & z>5)
{
y=5*t
}else{
y=z^2
}
y  #y=25
